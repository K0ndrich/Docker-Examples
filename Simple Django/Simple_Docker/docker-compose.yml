version: '3'

# создаем сам проект django -> 
# docker-compose run django django-admin startproject my_project . 

services:
  django:
    # build указывает путь к dockerfile по которому будем собирать текущий сервис
    build: .
    container_name: my_django_project
    # command указывает команды которые будут выполняться при сборке текущего сервиса django
    # запускаем локальный встроенный сервер django
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      # порт локальной машины : порт внутри контейнеров
      - "8000:8000"
    depends_on:
      - postgres_db
    volumes:
      # бемер весь локальный проект : прекидываем внутрь папки хоста контейнера (на локальный сервер)
      # путь к контейнеру берем из WORKDIR (dockerfile)
      # . указывает название и пать папки хоста, где будут хранитсья наши данные даже после удаления контейнеров(сервисов)
      - .:/usr/src/app

  
  postgres_db:
    image: postgres:latest
    # хранит переменные которые нужны будут для подключения к текущей базе данных
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    container_name: my_postgres_db
    volumes:
        # my_saves_from_db название постоянной папки локального проекта : путь где она будте лежать в папке хоста на удаленном сервере 
        # /var/lib/postgresql/data/ путь к папке хоста на удаленном сервере
      - my_saves_from_db:/var/lib/postgresql/data/

# в конце нужно писать глобальный volumes, где указывать названия папок с постояными данными контейнеров(сервисов)
volumes:
  my_saves_from_db: null


